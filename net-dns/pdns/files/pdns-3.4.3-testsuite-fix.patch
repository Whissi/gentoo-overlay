This patch set backports upstream PR #2230 to pdns-3.4.3 to allow running
the test suite in parallel (i.e. with `make -jN check` where "N" > 1).

diff --git a/configure.ac b/configure.ac
index ded8273..57870db 100644
--- a/configure.ac
+++ b/configure.ac
@@ -10,7 +10,7 @@ AC_CONFIG_MACRO_DIR([m4])
 AC_CONFIG_HEADERS([config.h])
 AC_CONFIG_AUX_DIR([build-aux])
 
-AM_INIT_AUTOMAKE([foreign dist-bzip2 no-dist-gzip tar-ustar -Wno-portability subdir-objects 1.11])
+AM_INIT_AUTOMAKE([foreign dist-bzip2 no-dist-gzip tar-ustar -Wno-portability subdir-objects parallel-tests 1.11])
 AM_SILENT_RULES([yes])
 
 AC_CANONICAL_HOST
@@ -296,6 +296,11 @@ for a in $modules $dynmodules; do
     opendbx)
       PDNS_CHECK_OPENDBX
       ;;
+    remote)
+      AS_IF([test "x$enable_unit_tests" = "xyes"],
+        [PDNS_CHECK_CURL_PROGRAM]
+      )
+      ;;
     tinydns)
       PDNS_CHECK_CDB
       ;;
diff --git a/m4/pdns_check_curl_program.m4 b/m4/pdns_check_curl_program.m4
new file mode 100644
index 0000000..d6abe1c
--- /dev/null
+++ b/m4/pdns_check_curl_program.m4
@@ -0,0 +1,7 @@
+AC_DEFUN([PDNS_CHECK_CURL_PROGRAM], [
+  AC_CHECK_PROG([CURL], [curl], [curl], [no])
+
+  AS_IF([test "x$CURL" = "xno"], [
+    AC_MSG_ERROR([curl program is missing, required for running remotebackend unit tests])
+  ])
+])
diff --git a/modules/remotebackend/Makefile.am b/modules/remotebackend/Makefile.am
index 4cd8007..196f5d3 100644
--- a/modules/remotebackend/Makefile.am
+++ b/modules/remotebackend/Makefile.am
@@ -6,7 +6,7 @@ AM_CPPFLAGS=$(THREADFLAGS) $(BOOST_CPPFLAGS) -I../../pdns/ext/rapidjson/include
 
 SUBDIRS=../../pdns/ext/yahttp
 EXTRA_DIST=OBJECTFILES OBJECTLIBS testrunner.sh unittest_http.rb unittest_json.rb unittest_pipe.rb unittest_zeromq.rb unittest_post.rb unittest.rb Gemfile Gemfile.lock
-EXTRA_PROGRAMS=test_remotebackend_pipe test_remotebackend_unix test_remotebackend_http test_remotebackend_post test_remotebackend_json test_remotebackend_zeromq
+EXTRA_PROGRAMS=remotebackend_pipe.test remotebackend_unix.test remotebackend_http.test remotebackend_post.test remotebackend_json.test remotebackend_zeromq.test
 EXTRA_LTLIBRARIES=libtestremotebackend.la
 
 clean-local:
@@ -20,8 +20,38 @@ libremotebackend_la_LDFLAGS=-module -avoid-version
 libremotebackend_la_LIBADD=$(LIBZMQ_LIBS) ../../pdns/ext/yahttp/yahttp/libyahttp.la
 
 if UNIT_TESTS
-TESTS_ENVIRONMENT = env BOOST_TEST_LOG_LEVEL=message REMOTEBACKEND_ZEROMQ=$(REMOTEBACKEND_ZEROMQ) ./testrunner.sh 
-TESTS=test_remotebackend_pipe test_remotebackend_unix test_remotebackend_http test_remotebackend_post test_remotebackend_json test_remotebackend_zeromq
+TESTS_ENVIRONMENT = \
+	BOOST_TEST_LOG_LEVEL=message; \
+	export BOOST_TEST_LOG_LEVEL; \
+	REMOTEBACKEND_ZEROMQ=$(REMOTEBACKEND_ZEROMQ); \
+	export REMOTEBACKEND_ZEROMQ;
+
+TEST_EXTENSIONS = .test
+
+TEST_LOG_COMPILER = $(abs_srcdir)/testrunner.sh
+
+TESTS = \
+	remotebackend_pipe.test \
+	remotebackend_unix.test \
+	remotebackend_http.test \
+	remotebackend_post.test \
+	remotebackend_json.test \
+	remotebackend_zeromq.test
+
+RECHECK_LOGS = \
+	$(TEST_LOGS) \
+	remotebackend_http_server.log \
+	remotebackend_post_server.log \
+	remotebackend_json_server.log \
+	remotebackend_zeromq_server.log
+
+## The http, post and json test are using the same TCP port.
+## To prevent "Address already in use - bind(2) (Errno::EADDRINUSE)"
+## errors when running `make check` in parallel, we need to specify
+## an order
+remotebackend_post.log: remotebackend_http.log
+
+remotebackend_json.log: remotebackend_http.log remotebackend_post.log
 endif
 
 BUILT_SOURCES=../../pdns/dnslabeltext.cc
@@ -48,34 +78,33 @@ endif
 libtestremotebackend_la_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) $(POLARSSL_CFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) $(P11KIT1_CFLAGS) -g -O0 -I../../pdns
 libtestremotebackend_la_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) $(POLARSSL_CFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) $(P11KIT1_CFLAGS) -g -O0 -I../../pdns
 
-test_remotebackend_pipe_SOURCES=test-remotebackend.cc test-remotebackend-pipe.cc test-remotebackend-keys.hh 
-test_remotebackend_unix_SOURCES=test-remotebackend.cc test-remotebackend-unix.cc test-remotebackend-keys.hh
-test_remotebackend_http_SOURCES=test-remotebackend.cc test-remotebackend-http.cc test-remotebackend-keys.hh
-test_remotebackend_post_SOURCES=test-remotebackend.cc test-remotebackend-post.cc test-remotebackend-keys.hh
-test_remotebackend_json_SOURCES=test-remotebackend.cc test-remotebackend-json.cc test-remotebackend-keys.hh
-test_remotebackend_zeromq_SOURCES=test-remotebackend.cc test-remotebackend-zeromq.cc test-remotebackend-keys.hh
+remotebackend_pipe_test_SOURCES=test-remotebackend.cc test-remotebackend-pipe.cc test-remotebackend-keys.hh 
+remotebackend_unix_test_SOURCES=test-remotebackend.cc test-remotebackend-unix.cc test-remotebackend-keys.hh
+remotebackend_http_test_SOURCES=test-remotebackend.cc test-remotebackend-http.cc test-remotebackend-keys.hh
+remotebackend_post_test_SOURCES=test-remotebackend.cc test-remotebackend-post.cc test-remotebackend-keys.hh
+remotebackend_json_test_SOURCES=test-remotebackend.cc test-remotebackend-json.cc test-remotebackend-keys.hh
+remotebackend_zeromq_test_SOURCES=test-remotebackend.cc test-remotebackend-zeromq.cc test-remotebackend-keys.hh
 
-test_remotebackend_pipe_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
-test_remotebackend_pipe_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
-test_remotebackend_pipe_LDADD=libtestremotebackend.la $(DYNLINKFLAGS) $(THREADFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(LIBDL) $(POLARSSL_LIBS) $(LIBZMQ_LIBS) 
+remotebackend_pipe_test_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
+remotebackend_pipe_test_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
+remotebackend_pipe_test_LDADD=libtestremotebackend.la $(DYNLINKFLAGS) $(THREADFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(LIBDL) $(POLARSSL_LIBS) $(LIBZMQ_LIBS) 
 
-test_remotebackend_unix_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
-test_remotebackend_unix_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
-test_remotebackend_unix_LDADD=libtestremotebackend.la $(DYNLINKFLAGS) $(THREADFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(LIBDL) $(POLARSSL_LIBS) $(LIBZMQ_LIBS) 
+remotebackend_unix_test_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
+remotebackend_unix_test_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
+remotebackend_unix_test_LDADD=libtestremotebackend.la $(DYNLINKFLAGS) $(THREADFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(LIBDL) $(POLARSSL_LIBS) $(LIBZMQ_LIBS) 
 
-test_remotebackend_http_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
-test_remotebackend_http_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
-test_remotebackend_http_LDADD=libtestremotebackend.la $(DYNLINKFLAGS) $(THREADFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(LIBDL) $(POLARSSL_LIBS) $(LIBZMQ_LIBS) 
+remotebackend_http_test_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
+remotebackend_http_test_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
+remotebackend_http_test_LDADD=libtestremotebackend.la $(DYNLINKFLAGS) $(THREADFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(LIBDL) $(POLARSSL_LIBS) $(LIBZMQ_LIBS) 
 
-test_remotebackend_post_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
-test_remotebackend_post_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
-test_remotebackend_post_LDADD=libtestremotebackend.la $(DYNLINKFLAGS) $(THREADFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(LIBDL) $(POLARSSL_LIBS) $(LIBZMQ_LIBS) 
+remotebackend_post_test_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
+remotebackend_post_test_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
+remotebackend_post_test_LDADD=libtestremotebackend.la $(DYNLINKFLAGS) $(THREADFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(LIBDL) $(POLARSSL_LIBS) $(LIBZMQ_LIBS) 
 
-test_remotebackend_json_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
-test_remotebackend_json_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
-test_remotebackend_json_LDADD=libtestremotebackend.la $(DYNLINKFLAGS) $(THREADFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(LIBDL) $(POLARSSL_LIBS) $(LIBZMQ_LIBS) 
-
-test_remotebackend_zeromq_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
-test_remotebackend_zeromq_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
-test_remotebackend_zeromq_LDADD=libtestremotebackend.la $(DYNLINKFLAGS) $(THREADFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(LIBDL) $(POLARSSL_LIBS) $(LIBZMQ_LIBS)
+remotebackend_json_test_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
+remotebackend_json_test_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
+remotebackend_json_test_LDADD=libtestremotebackend.la $(DYNLINKFLAGS) $(THREADFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(LIBDL) $(POLARSSL_LIBS) $(LIBZMQ_LIBS) 
 
+remotebackend_zeromq_test_CFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
+remotebackend_zeromq_test_CXXFLAGS=$(BOOST_CPPFLAGS) $(THREADFLAGS) -I../../pdns/ext/yahttp $(LIBZMQ_CFLAGS) -g -O0 -I../../pdns
+remotebackend_zeromq_test_LDADD=libtestremotebackend.la $(DYNLINKFLAGS) $(THREADFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS) $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) $(BOOST_SERIALIZATION_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(LIBDL) $(POLARSSL_LIBS) $(LIBZMQ_LIBS)
diff --git a/modules/remotebackend/testrunner.sh b/modules/remotebackend/testrunner.sh
index 1d44b6b..6b06504 100755
--- a/modules/remotebackend/testrunner.sh
+++ b/modules/remotebackend/testrunner.sh
@@ -1,5 +1,4 @@
 #!/usr/bin/env bash
-set -x
 new_api=0
 mode=$1
 
@@ -23,83 +22,192 @@ zeromq_pid=""
 socat=$(which socat)
 
 function start_web() {
- ./unittest_$1.rb >> $mode.log 2>&1 & 
- webrick_pid=$!
- loopcount=0
- while [ $loopcount -lt 20 ]; do
-   res=$(curl http://localhost:62434/ping 2>/dev/null)
-   if [ "x$res" == "xpong" ]; then break; fi
-   sleep 1
-   let loopcount=loopcount+1
+  local service_logfile="${mode%\.test}_server.log"
+
+  ./unittest_${1}.rb >> ${service_logfile} 2>&1 &
+  webrick_pid=$!
+
+  local timeout=0
+  while [ ${timeout} -lt 20 ]; do
+    local res=$(curl http://localhost:62434/ping 2>/dev/null)
+    if [ "x$res" == "xpong" ]; then
+      # server is up and running
+      return 0
+    fi
+
+    sleep 1
+    let timeout=timeout+1
   done
+
+  if kill -0 ${webrick_pid} 2>/dev/null; then
+    # if something is wrong with curl (i.e. curl isn't installed, localhost is firewalled ...)
+    # the status check will fail -- cleanup required!
+    echo >&2 "WARNING: Timeout (${timeout}s) reached: \"${1}\" test service process is running but status check failed"
+    kill -KILL ${webrick_pid} 2>/dev/null
+  fi
+
+  echo >&2 "ERROR: A timeout (${timeout}s) was reached while waiting for \"${1}\" test service to start!"
+  echo >&2 "       See \"modules/remotebackend/${service_logfile}\" for more details."
+  exit 69
 }
 
 function stop_web() {
- if [ ! -z "$webrick_pid" ]; then
-   kill -TERM $webrick_pid
-   # wait a moment for it to die
-   i=0
-   while [ $i -lt 5 ]; do
-     sleep 1
-     kill -0 $webrick_pid 2>/dev/null
-     if [ $? -ne 0 ]; then break; fi
-     let i=i+1
-   done
- fi
+  if [ -z "${webrick_pid}" ]; then
+    # should never happen - why was stop_web() called?
+    echo >&2 "ERROR: Unable to stop \"${1}\" test service: Did we ever start the service?"
+    exit 99
+  fi
+
+  if ! kill -0 ${webrick_pid} 2>/dev/null; then
+    # should never happen - did the test crashed the service?
+    echo >&2 "ERROR: Unable to stop \"${1}\" test service: service (${webrick_pid}) not running"
+    exit 69
+  fi
+
+  kill -TERM ${webrick_pid}
+  local timeout=0
+  while [ ${timeout} -lt 5 ]; do
+    if ! kill -0 ${webrick_pid} 2>/dev/null; then
+      # service was stopped
+      return 0
+    fi
+
+    sleep 1
+    let timeout=timeout+1
+  done
+
+  if kill -0 ${webrick_pid} 2>/dev/null; then
+    echo >&2 "WARNING: Timeout (${timeout}s) reached - killing \"${1}\" test service ..."
+    kill -KILL ${webrick_pid} 2>/dev/null
+    return $?
+  fi
 }
 
 function start_zeromq() {
-  if [ x"$REMOTEBACKEND_ZEROMQ" == "xyes" ]; then
-   ./unittest_zeromq.rb >> $mode.log 2>&1 &
-   zeromq_pid=$!
-   # need to wait a moment
-   sleep 5
+  if [ x"$REMOTEBACKEND_ZEROMQ" != "xyes" ]; then
+    echo "INFO: Skipping \"ZeroMQ\" test because PowerDNS was built without \"--enable-remotebackend-zeromq\"!"
+    exit 77
+  fi
+
+  local service_logfile="${mode%\.test}_server.log"
+
+  ./unittest_zeromq.rb >> ${service_logfile} 2>&1 &
+  zeromq_pid=$!
+
+  local timeout=0
+  while [ ${timeout} -lt 5 ]; do
+    if [ -S "/tmp/remotebackend.0" ]; then
+      # service is up and running
+      return 0
+    fi
+
+    sleep 1
+    let timeout=timeout+1
+  done
+
+  if kill -0 ${zeromq_pid} 2>/dev/null; then
+    # not sure when this can happen but we should cleanup any process we started
+    echo >&2 "WARNING: Timeout (${timeout}s) reached: \"ZeroMQ\" test service process is running but status check failed"
+    kill -KILL ${zeromq_pid} 2>/dev/null
   fi
+
+  echo >&2 "ERROR: A timeout (${timeout}s) was reached while waiting for \"ZeroMQ\" test service to start!"
+  echo >&2 "       See \"modules/remotebackend/${service_logfile}\" for more details."
+  exit 69
 }
 
 function stop_zeromq() {
- if [ ! -z "$zeromq_pid" ]; then
-   kill -TERM $zeromq_pid 
-   # wait a moment for it to die
-   i=0
-   while [ $i -lt 5 ]; do
-     sleep 1
-     kill -0 $zeromq_pid 2>/dev/null
-     if [ $? -ne 0 ]; then break; fi
-     let i=i+1
-   done
-   kill -0 $zeromq_pid 2>/dev/null
-   if [ $? -eq 0 ]; then kill -9 $zeromq_pid; fi
- fi
+  if [ -z "${zeromq_pid}" ]; then
+    # should never happen - why was stop_zeromq() called?
+    echo >&2 "ERROR: Unable to stop \"ZeroMQ\" test service: Did we ever start the service?"
+    exit 99
+  fi
+
+  if ! kill -0 ${zeromq_pid} 2>/dev/null; then
+    # should never happen - did the test crashed the service?
+    echo >&2 "ERROR: Unable to stop \"ZeroMQ\" test service: service (${zeromq_pid}) not running"
+    exit 69
+  fi
+
+  kill -TERM ${zeromq_pid}
+  local timeout=0
+  while [ ${timeout} -lt 5 ]; do
+    if ! kill -0 ${zeromq_pid} 2>/dev/null; then
+      # service was stopped
+      return 0
+    fi
+
+    sleep 1
+    let timeout=timeout+1
+  done
+
+  if kill -0 ${zeromq_pid} 2>/dev/null; then
+    echo >&2 "WARNING: Timeout (${timeout}s) reached - killing \"ZeroMQ\" test service ..."
+    kill -KILL ${zeromq_pid} 2>/dev/null
+    return $?
+  fi
 }
 
 function start_unix() {
   if [ -z "$socat" -o ! -x "$socat" ]; then
-     echo "Cannot find socat - skipping test (non-fatal)"
-     exit 0
+    echo "INFO: Skipping \"UNIX socket\" test because \"socat\" executable wasn't found!"
+    exit 77
   fi
-  
+
   $socat unix-listen:/tmp/remotebackend.sock exec:./unittest_pipe.rb &
   socat_pid=$!
-  sleep 1
+
+  local timeout=0
+  while [ ${timeout} -lt 5 ]; do
+    if [ -S "/tmp/remotebackend.sock" ]; then
+      # service is up and running
+      return 0
+    fi
+
+    sleep 1
+    let timeout=timeout+1
+  done
+
+  if kill -0 ${socat_pid} 2>/dev/null; then
+    # not sure when this can happen but we should cleanup any process we started
+    echo >&2 "WARNING: Timeout (${timeout}s) reached: \"UNIX socket\" test service process is running but status check failed"
+    kill -KILL ${socat_pid} 2>/dev/null
+  fi
+
+  echo >&2 "ERROR: A timeout (${timeout}s) was reached while waiting for \"UNIX socket\" test service to start!"
+  exit 69
 }
 
 function stop_unix() {
- if [ ! -z "$socat_pid" ]; then
-   kill -TERM $socat_pid 2>/dev/null
-   if [ $? -ne 0 ]; then
-     # already dead
-     return 
-   fi
-   # wait a moment for it to die
-   i=0
-   while [ $i -lt 5 ]; do
-     sleep 1
-     kill -0 $socat_pid 2>/dev/null
-     if [ $? -ne 0 ]; then break; fi
-     let i=i+1
-   done
- fi
+  if [ -z "${socat_pid}" ]; then
+    # should never happen - why was stop_unix() called?
+    echo >&2 "ERROR: Unable to stop \"UNIX socket\" test service: Did we ever start the service?"
+    exit 99
+  fi
+
+  if ! kill -0 ${socat_pid} 2>/dev/null; then
+    # should never happen - did the test crashed the service?
+    echo >&2 "ERROR: Unable to stop \"UNIX socket\" test service: service (${socat_pid}) not running"
+    exit 69
+  fi
+
+  kill -TERM ${socat_pid}
+  local timeout=0
+  while [ ${timeout} -lt 5 ]; do
+    if ! kill -0 ${socat_pid} 2>/dev/null; then
+      # service was stopped
+      return 0
+    fi
+
+    sleep 1
+    let timeout=timeout+1
+  done
+
+  if kill -0 ${socat_pid} 2>/dev/null; then
+    echo >&2 "WARNING: Timeout (${timeout}s) reached - killing \"UNIX socket\" test service ..."
+    kill -KILL ${socat_pid} 2>/dev/null
+    return $?
+  fi
 }
 
 function run_test() {
@@ -113,38 +221,38 @@ function run_test() {
 mode=`basename "$mode"`
 
 case "$mode" in
-  test_remotebackend_pipe)
+  remotebackend_pipe.test)
     run_test
   ;;
-  test_remotebackend_unix)
+  remotebackend_unix.test)
     start_unix
     run_test
     stop_unix
   ;;
-  test_remotebackend_http)
+  remotebackend_http.test)
     start_web "http"
     run_test
-    stop_web
+    stop_web "http"
   ;;
-  test_remotebackend_post)
+  remotebackend_post.test)
     start_web "post"
     run_test
-    stop_web
+    stop_web "post"
   ;;
-  test_remotebackend_json)
+  remotebackend_json.test)
     start_web "json"
     run_test
-    stop_web
+    stop_web "json"
   ;;
-  test_remotebackend_zeromq)
-    start_zeromq 
+  remotebackend_zeromq.test)
+    start_zeromq
     run_test
     stop_zeromq
   ;;
   *)
-     echo "Usage: $0 test_remotebackend_(pipe|unix|http|post|json|zeromq)"
-     exit 1
+    echo "Usage: $0 remotebackend_(pipe|unix|http|post|json|zeromq).test"
+    exit 1
   ;;
 esac
 
-exit $rv
+exit $?
